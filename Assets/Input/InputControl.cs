//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    public partial class @InputControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControl"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""e3df4042-b5d9-4ec0-a7f6-c5763ceae4d8"",
            ""actions"": [
                {
                    ""name"": ""PerformAction"",
                    ""type"": ""Button"",
                    ""id"": ""26ace350-56ce-4671-9215-c556f2920552"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""d18878f9-3b20-4fe2-bbaa-a1dad367b8af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelAction"",
                    ""type"": ""Button"",
                    ""id"": ""f749f193-d5e7-4e1b-b10e-4906b37d2ab2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""7ce46a63-e6aa-4b7b-b2a2-f7451f08d97d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCounterClockwise"",
                    ""type"": ""Button"",
                    ""id"": ""717a0630-5097-4f44-8a62-8887beffde9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlipAction"",
                    ""type"": ""Button"",
                    ""id"": ""46faee8b-8704-489c-9511-82df0e473fab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TetrominoRotate"",
                    ""type"": ""Value"",
                    ""id"": ""5338fed7-85f8-43cc-8a2b-7596a9250c74"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HardDrop"",
                    ""type"": ""Button"",
                    ""id"": ""67d7a2bf-22fc-4ad3-9393-cb29e471d58e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveActions"",
                    ""type"": ""Value"",
                    ""id"": ""2e8c4993-b75f-4ff1-b843-f6f2e8eec04f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""fc04bf02-decf-42b8-892e-02acd57dca2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7897be11-b8c5-4fef-a785-41c721c593a0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerformAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59b14ef9-f06d-4577-9cf1-320fa6fda947"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0fef93e-b3cd-422a-b963-c678e7a3e5a5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""892ef706-5433-4c35-ae2e-ec49056d01b0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a709062d-ae37-4785-9e44-621ff31bbd59"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCounterClockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5c193fe-ebb1-45bc-8beb-6614d2efb9ab"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlipAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4f5ee6b-72ac-4922-9c1b-f5ffef768f49"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlipAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea09981a-d25a-4994-940e-a8db71a6fc6c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TetrominoRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad207d46-5f4a-41e4-ac8e-1910c2a8cdc9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4b0fd34c-ec5a-40a1-8bc2-8db5066287e0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveActions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""43c84154-55da-42b3-90a8-ec63e2f37827"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""89db30fb-f7c7-40d4-b39e-9cc20d087a40"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d89c76a3-0536-49f6-823f-a7b0d6d66cb9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""28a76704-5747-4e10-a320-d3eb23f838b3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GamePlay
            m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
            m_GamePlay_PerformAction = m_GamePlay.FindAction("PerformAction", throwIfNotFound: true);
            m_GamePlay_MousePosition = m_GamePlay.FindAction("MousePosition", throwIfNotFound: true);
            m_GamePlay_CancelAction = m_GamePlay.FindAction("CancelAction", throwIfNotFound: true);
            m_GamePlay_RotateClockwise = m_GamePlay.FindAction("RotateClockwise", throwIfNotFound: true);
            m_GamePlay_RotateCounterClockwise = m_GamePlay.FindAction("RotateCounterClockwise", throwIfNotFound: true);
            m_GamePlay_FlipAction = m_GamePlay.FindAction("FlipAction", throwIfNotFound: true);
            m_GamePlay_TetrominoRotate = m_GamePlay.FindAction("TetrominoRotate", throwIfNotFound: true);
            m_GamePlay_HardDrop = m_GamePlay.FindAction("HardDrop", throwIfNotFound: true);
            m_GamePlay_MoveActions = m_GamePlay.FindAction("MoveActions", throwIfNotFound: true);
            m_GamePlay_Exit = m_GamePlay.FindAction("Exit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GamePlay
        private readonly InputActionMap m_GamePlay;
        private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
        private readonly InputAction m_GamePlay_PerformAction;
        private readonly InputAction m_GamePlay_MousePosition;
        private readonly InputAction m_GamePlay_CancelAction;
        private readonly InputAction m_GamePlay_RotateClockwise;
        private readonly InputAction m_GamePlay_RotateCounterClockwise;
        private readonly InputAction m_GamePlay_FlipAction;
        private readonly InputAction m_GamePlay_TetrominoRotate;
        private readonly InputAction m_GamePlay_HardDrop;
        private readonly InputAction m_GamePlay_MoveActions;
        private readonly InputAction m_GamePlay_Exit;
        public struct GamePlayActions
        {
            private @InputControl m_Wrapper;
            public GamePlayActions(@InputControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @PerformAction => m_Wrapper.m_GamePlay_PerformAction;
            public InputAction @MousePosition => m_Wrapper.m_GamePlay_MousePosition;
            public InputAction @CancelAction => m_Wrapper.m_GamePlay_CancelAction;
            public InputAction @RotateClockwise => m_Wrapper.m_GamePlay_RotateClockwise;
            public InputAction @RotateCounterClockwise => m_Wrapper.m_GamePlay_RotateCounterClockwise;
            public InputAction @FlipAction => m_Wrapper.m_GamePlay_FlipAction;
            public InputAction @TetrominoRotate => m_Wrapper.m_GamePlay_TetrominoRotate;
            public InputAction @HardDrop => m_Wrapper.m_GamePlay_HardDrop;
            public InputAction @MoveActions => m_Wrapper.m_GamePlay_MoveActions;
            public InputAction @Exit => m_Wrapper.m_GamePlay_Exit;
            public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
            public void AddCallbacks(IGamePlayActions instance)
            {
                if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
                @PerformAction.started += instance.OnPerformAction;
                @PerformAction.performed += instance.OnPerformAction;
                @PerformAction.canceled += instance.OnPerformAction;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @CancelAction.started += instance.OnCancelAction;
                @CancelAction.performed += instance.OnCancelAction;
                @CancelAction.canceled += instance.OnCancelAction;
                @RotateClockwise.started += instance.OnRotateClockwise;
                @RotateClockwise.performed += instance.OnRotateClockwise;
                @RotateClockwise.canceled += instance.OnRotateClockwise;
                @RotateCounterClockwise.started += instance.OnRotateCounterClockwise;
                @RotateCounterClockwise.performed += instance.OnRotateCounterClockwise;
                @RotateCounterClockwise.canceled += instance.OnRotateCounterClockwise;
                @FlipAction.started += instance.OnFlipAction;
                @FlipAction.performed += instance.OnFlipAction;
                @FlipAction.canceled += instance.OnFlipAction;
                @TetrominoRotate.started += instance.OnTetrominoRotate;
                @TetrominoRotate.performed += instance.OnTetrominoRotate;
                @TetrominoRotate.canceled += instance.OnTetrominoRotate;
                @HardDrop.started += instance.OnHardDrop;
                @HardDrop.performed += instance.OnHardDrop;
                @HardDrop.canceled += instance.OnHardDrop;
                @MoveActions.started += instance.OnMoveActions;
                @MoveActions.performed += instance.OnMoveActions;
                @MoveActions.canceled += instance.OnMoveActions;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }

            private void UnregisterCallbacks(IGamePlayActions instance)
            {
                @PerformAction.started -= instance.OnPerformAction;
                @PerformAction.performed -= instance.OnPerformAction;
                @PerformAction.canceled -= instance.OnPerformAction;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @CancelAction.started -= instance.OnCancelAction;
                @CancelAction.performed -= instance.OnCancelAction;
                @CancelAction.canceled -= instance.OnCancelAction;
                @RotateClockwise.started -= instance.OnRotateClockwise;
                @RotateClockwise.performed -= instance.OnRotateClockwise;
                @RotateClockwise.canceled -= instance.OnRotateClockwise;
                @RotateCounterClockwise.started -= instance.OnRotateCounterClockwise;
                @RotateCounterClockwise.performed -= instance.OnRotateCounterClockwise;
                @RotateCounterClockwise.canceled -= instance.OnRotateCounterClockwise;
                @FlipAction.started -= instance.OnFlipAction;
                @FlipAction.performed -= instance.OnFlipAction;
                @FlipAction.canceled -= instance.OnFlipAction;
                @TetrominoRotate.started -= instance.OnTetrominoRotate;
                @TetrominoRotate.performed -= instance.OnTetrominoRotate;
                @TetrominoRotate.canceled -= instance.OnTetrominoRotate;
                @HardDrop.started -= instance.OnHardDrop;
                @HardDrop.performed -= instance.OnHardDrop;
                @HardDrop.canceled -= instance.OnHardDrop;
                @MoveActions.started -= instance.OnMoveActions;
                @MoveActions.performed -= instance.OnMoveActions;
                @MoveActions.canceled -= instance.OnMoveActions;
                @Exit.started -= instance.OnExit;
                @Exit.performed -= instance.OnExit;
                @Exit.canceled -= instance.OnExit;
            }

            public void RemoveCallbacks(IGamePlayActions instance)
            {
                if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGamePlayActions instance)
            {
                foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GamePlayActions @GamePlay => new GamePlayActions(this);
        public interface IGamePlayActions
        {
            void OnPerformAction(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnCancelAction(InputAction.CallbackContext context);
            void OnRotateClockwise(InputAction.CallbackContext context);
            void OnRotateCounterClockwise(InputAction.CallbackContext context);
            void OnFlipAction(InputAction.CallbackContext context);
            void OnTetrominoRotate(InputAction.CallbackContext context);
            void OnHardDrop(InputAction.CallbackContext context);
            void OnMoveActions(InputAction.CallbackContext context);
            void OnExit(InputAction.CallbackContext context);
        }
    }
}
